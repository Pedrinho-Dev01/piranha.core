@page "/manager/workflows/review"
@attribute [Area("Manager")]

@using Piranha.Manager.Localization
@inject ManagerLocalizer Localizer
@model Piranha.Manager.Pages.Workflows.ReviewModel

@{
    Layout = "_Layout";
    ViewBag.MenuItem = "WorkflowsReview";
    ViewBag.Title = Localizer.Menu["Review"] ?? "Review Content";
}

@* CSRF Token para uso com fetch *@
<form style="display:none">@Html.AntiForgeryToken()</form>

<div class="top">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">@Localizer.Menu["Content"]</li>
            <li class="breadcrumb-item active" aria-current="page">@ViewBag.Title</li>
        </ol>
    </nav>
</div>

<div class="container-fluid app ready">
    <!-- Debug Information Expandida -->
    <div class="alert alert-info">
        <h6>Debug Info:</h6>
        <div class="row">
            <div class="col-md-6">
                <p><strong>Total Pages:</strong> @Model.Pages.Count</p>
                <p><strong>Pages with Workflow:</strong> @Model.Pages.Count(p => p.HasWorkflow)</p>
                <p><strong>Pages without Workflow:</strong> @Model.Pages.Count(p => !p.HasWorkflow)</p>
            </div>
            <div class="col-md-6">
                <p><strong>Pending Review:</strong> @Model.Pages.Count(p => p.Status == "PendingReview")</p>
                <p><strong>Pending Legal:</strong> @Model.Pages.Count(p => p.Status == "PendingLegal")</p>
                <p><strong>Approved:</strong> @Model.Pages.Count(p => p.Status == "Approved")</p>
                <p><strong>Rejected:</strong> @Model.Pages.Count(p => p.Status == "Rejected")</p>
                <p><strong>Draft:</strong> @Model.Pages.Count(p => p.Status == "Draft")</p>
            </div>
        </div>
    </div>

    <ul class="nav nav-pills mb-3" id="reviewTabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" data-toggle="pill" href="#tab-pending-review" role="tab">
                Pending Review (@Model.Pages.Count(p => p.Status == "PendingReview"))
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="pill" href="#tab-pending-legal" role="tab">
                Pending Legal (@Model.Pages.Count(p => p.Status == "PendingLegal"))
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="pill" href="#tab-approved" role="tab">
                Approved (@Model.Pages.Count(p => p.Status == "Approved"))
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="pill" href="#tab-rejected" role="tab">
                Rejected (@Model.Pages.Count(p => p.Status == "Rejected"))
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="pill" href="#tab-debug" role="tab">
                Debug Info (@Model.Pages.Count)
            </a>
        </li>
    </ul>

    <div class="tab-content">
        <!-- Pending Review -->
        <div class="tab-pane fade show active" id="tab-pending-review" role="tabpanel">
            @if (Model.Pages != null && Model.Pages.Any(p => p.Status == "PendingReview"))
            {
                <table class="table table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th>@Localizer.Content["Title"]</th>
                            <th>@Localizer.Content["Type"]</th>
                            <th>@Localizer.Content["Author"]</th>
                            <th>@Localizer.Content["Submission Date"]</th>
                            <th>Workflow Info</th>
                            <th>@Localizer.Content["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var contentPage in Model.Pages.Where(p => p.Status == "PendingReview"))
                        {
                            <tr>
                                <td>
                                    <a class="text-dark" href="@(contentPage.EditUrl)" target="_blank">@contentPage.Title</a>
                                </td>
                                <td>@contentPage.TypeName</td>
                                <td>@contentPage.Author</td>
                                <td>@contentPage.SubmissionDate.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>
                                    <small class="text-muted">
                                        Step: @contentPage.WorkflowCurrentStep<br/>
                                        Approved: @contentPage.WorkflowIsApproved
                                    </small>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-success btn-approve" data-page-id="@contentPage.Id" title="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger btn-reject" data-page-id="@contentPage.Id" title="Reject">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-warning">
                    <h6>No pending review items found.</h6>
                    <p>This could mean:</p>
                    <ul>
                        <li>No pages have been submitted for review</li>
                        <li>Workflow system is not properly configured</li>
                        <li>Pages are in a different status</li>
                    </ul>
                </div>
            }
        </div>

        <!-- Pending Legal -->
        <div class="tab-pane fade" id="tab-pending-legal" role="tabpanel">
            @if (Model.Pages != null && Model.Pages.Any(p => p.Status == "PendingLegal"))
            {
                <table class="table table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th>@Localizer.Content["Title"]</th>
                            <th>@Localizer.Content["Type"]</th>
                            <th>@Localizer.Content["Author"]</th>
                            <th>@Localizer.Content["Submission Date"]</th>
                            <th>Workflow Info</th>
                            <th>@Localizer.Content["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var contentPage in Model.Pages.Where(p => p.Status == "PendingLegal"))
                        {
                            <tr>
                                <td>
                                    <a class="text-dark" href="@(contentPage.EditUrl)" target="_blank">@contentPage.Title</a>
                                </td>
                                <td>@contentPage.TypeName</td>
                                <td>@contentPage.Author</td>
                                <td>@contentPage.SubmissionDate.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>
                                    <small class="text-muted">
                                        Step: @contentPage.WorkflowCurrentStep<br/>
                                        Approved: @contentPage.WorkflowIsApproved
                                    </small>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-success btn-approve" data-page-id="@contentPage.Id" title="Approve">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger btn-reject" data-page-id="@contentPage.Id" title="Reject">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No pending legal items.</p>
            }
        </div>

        <!-- Approved -->
        <div class="tab-pane fade" id="tab-approved" role="tabpanel">
            @if (Model.Pages != null && Model.Pages.Any(p => p.Status == "Approved"))
            {
                <ul class="list-group">
                    @foreach (var contentPage in Model.Pages.Where(p => p.Status == "Approved"))
                    {
                        <li class="list-group-item">
                            <div>
                                <a href="@(contentPage.EditUrl)" target="_blank">@contentPage.Title</a>
                                <small class="text-muted d-block">
                                    @contentPage.TypeName - @contentPage.SubmissionDate.ToString("dd/MM/yyyy") - 
                                    Step: @contentPage.WorkflowCurrentStep
                                </small>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">No approved items.</p>
            }
        </div>

        <!-- Rejected -->
        <div class="tab-pane fade" id="tab-rejected" role="tabpanel">
            @if (Model.Pages != null && Model.Pages.Any(p => p.Status == "Rejected"))
            {
                <ul class="list-group">
                    @foreach (var rejectedPage in Model.Pages.Where(p => p.Status == "Rejected"))
                    {
                        <li class="list-group-item">
                            <div>
                                <a href="@(rejectedPage.EditUrl)" target="_blank">@rejectedPage.Title</a>
                                <small class="text-muted d-block">
                                    @rejectedPage.TypeName - @rejectedPage.SubmissionDate.ToString("dd/MM/yyyy") - 
                                    Step: @rejectedPage.WorkflowCurrentStep
                                </small>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">No rejected items.</p>
            }
        </div>

        <!-- Debug Tab -->
        <div class="tab-pane fade" id="tab-debug" role="tabpanel">
            <div class="table-responsive">
                <table class="table table-sm table-striped">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Status</th>
                            <th>Has Workflow</th>
                            <th>Current Step</th>
                            <th>Is Approved</th>
                            <th>Raw Workflow Status</th>
                            <th>Workflow Steps</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var currentPage in Model.Pages)
                        {
                            <tr class="@(currentPage.HasWorkflow ? "" : "table-secondary")">
                                <td>
                                    <a href="@currentPage.EditUrl" target="_blank">@currentPage.Title</a>
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(currentPage.Status)">
                                        @currentPage.Status
                                    </span>
                                </td>
                                <td>
                                    @if (currentPage.HasWorkflow)
                                    {
                                        <i class="fas fa-check text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times text-muted"></i>
                                    }
                                </td>
                                <td>@(currentPage.WorkflowCurrentStep?.ToString() ?? "N/A")</td>
                                <td>
                                    @if (currentPage.WorkflowIsApproved)
                                    {
                                        <i class="fas fa-check text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times text-muted"></i>
                                    }
                                </td>
                                <td><small>@currentPage.RawWorkflowStatus</small></td>
                                <td><small>@currentPage.WorkflowSteps</small></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para rejeição -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject content</h5>
                <button class="close" data-dismiss="modal"><span>&times;</span></button>
            </div>
            <div class="modal-body">
                <textarea v-model="rejectReason" class="form-control" rows="3" placeholder="Reason for rejection..."></textarea>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button class="btn btn-danger" v-on:click="confirmReject()">Reject</button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "PendingReview" => "badge-warning",
            "PendingLegal" => "badge-info", 
            "Approved" => "badge-success",
            "Rejected" => "badge-danger",
            "Draft" => "badge-secondary",
            _ => "badge-light"
        };
    }
}

@section Script {
<script>
document.addEventListener('DOMContentLoaded', function() {
    var app = new Vue({
        el: '.container-fluid.app.ready',
        data: {
            processing: false,
            selectedPageId: null,
            rejectReason: ''
        },
        methods: {
            approveContent: function(pageId) {
                this.processWorkflowAction('approve', pageId);
            },
            rejectContent: function(pageId, reason) {
                this.selectedPageId = pageId;
                this.rejectReason = reason || '';
                this.processWorkflowAction('deny', pageId, reason);
            },
            processWorkflowAction: function(action, pageId, reason) {
                var self = this;
                if (self.processing) return;
                self.processing = true;

                var payload = reason ? { reason: reason } : {};

                fetch(piranha.baseUrl + "manager/api/workflow/" + action + "/" + pageId, {
                    method: "POST",
                    headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": self.getAntiForgeryToken()
                },
                    credentials: 'include',
                    body: JSON.stringify(payload)
                })
                .then(function(response) {
                    return response.json();
                })
                .then(function(result) {
                    self.processing = false;
                    if (result.success) {
                        piranha.notifications.push({
                            body: result.message || "Action completed",
                            type: "success",
                            hide: true
                        });
                        setTimeout(function() {
                            window.location.reload();
                        }, 1000);
                    } else {
                        piranha.notifications.push({
                            body: result.message || "Action failed",
                            type: "danger",
                            hide: true
                        });
                    }
                })
                .catch(function(error) {
                    self.processing = false;
                    piranha.notifications.push({
                        body: "An error occurred",
                        type: "danger",
                        hide: true
                    });
                });
            },
            openRejectModal: function(pageId) {
                this.selectedPageId = pageId;
                this.rejectReason = '';
                $('#rejectModal').modal('show');
            },
            confirmReject: function() {
                if (this.selectedPageId && this.rejectReason.trim()) {
                    this.rejectContent(this.selectedPageId, this.rejectReason);
                    $('#rejectModal').modal('hide');
                } else {
                    piranha.notifications.push({
                        body: "Please provide a reason for rejection",
                        type: "warning",
                        hide: true
                    });
                }
            },
            getAntiForgeryToken: function() {
                var token = document.querySelector('input[name="__RequestVerificationToken"]');
                return token ? token.value : '';
            }
        }
    });

    document.querySelectorAll('.btn-approve').forEach(function(btn) {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            var pageId = this.getAttribute('data-page-id');
            app.approveContent(pageId);
        });
    });

    document.querySelectorAll('.btn-reject').forEach(function(btn) {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            var pageId = this.getAttribute('data-page-id');
            app.openRejectModal(pageId);
        });
    });
});
</script>
}